BUG 1 

Some of the tables are still showing up as text fields post load into the datastore 

These tables are: 

dim_currency 
dim_currency_conversion
dim_product_details
dim_users
orders_table
land_card_details
land_currency
land_currency_conversion
land_date_times
land_product_details
land_store_details
land_user_data


Investigate the causes behind these issues. 

Proposed solution 

The reason for the alteration of the schema after the ETL process could be due to the way the pandas.DataFrame.to_sql() 
method interacts with the PostgreSQL database through SQLAlchemy.

When using to_sql(), the method infers the data types of the columns in the DataFrame 
and maps them to the corresponding PostgreSQL data types based on the default dialect provided by SQLAlchemy. 

This mapping process may lead to slight differences in the data types between the original schema and the resulting table schema.

In the specific case you provided, 
there are some differences in the data types between the original dim_currency table and the resulting dim_currency_conversion table:

country_name changed from character varying(100) to text
currency_code changed from character varying(10) to text
country_code changed from character varying(5) to text

currency_symbol was removed from the schema
These changes could be a result of the inferred data types and mappings performed by the to_sql() method.

To address this issue and ensure the desired schema is maintained during the ETL process, 
you can explicitly define the data types when using the to_sql() method by providing a dtype parameter. For example:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

from sqlalchemy import create_engine

# Assuming you have a DataFrame named 'df' containing the cleaned data

# Define the database connection URL
database_url = 'postgresql://username:password@localhost:5432/database_name'

# Create an SQLAlchemy engine
engine = create_engine(database_url)

# Define the desired data types for each column
dtype = {
    'index': 'bigint',
    'currency_conversion_key': 'bigint',
    'currency_name': 'text',
    'currency_code': 'text',
    'conversion_rate': 'text',
    'conversion_rate_percentage': 'text',
    'last_updated': 'text'
}

# Upload the DataFrame to the database with the specified data types
df.to_sql('dim_currency_conversion', engine, schema='public', if_exists='replace', index=False, dtype=dtype)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

This logic should be added to the upload_to_db method in the database_utils script. 

the dtype variable can be passed into the .sql method and set as a parameter. 

_upload_to_database uses this method, so that should be adjusted accordingly. 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Table schema dictionaries 

dim_currency

dtype = {
    'index': 'bigint',
    'currency_key': 'bigint',
    'currency_conversion_key': 'bigint',
    'country_name': 'varchar(100)',
    'currency_code': 'varchar(10)',
    'country_code': 'varchar(5)',
    'currency_symbol': 'text'
}

dim_currency_conversion

dtypes = {
    'index': 'bigint',
    'currency_conversion_key': 'bigint',
    'currency_name': 'varchar(50)',
    'currency_code': 'varchar(5)',
    'conversion_rate': 'numeric(20,6)',
    'percentage_change': 'numeric(20,6)',
    'last_updated': 'timestamp with time zone'
}


dim_date_times 

dtype = {
    'index': 'bigint',
    'currency_key': 'bigint',
    'currency_conversion_key': 'bigint',
    'country_name': 'varchar(100)',
    'currency_code': 'varchar(10)',
    'country_code': 'varchar(5)',
    'currency_symbol': 'text'
}

dim_product_details

dtypes = {
    'index': 'bigint',
    'product_key': 'bigint',
    'EAN': 'varchar(50)',
    'product_name': 'varchar(500)',
    'product_price': 'float',
    'weight': 'float',
    'category': 'varchar(50)',
    'date_added': 'date',
    'uuid': 'uuid',
    'availability': 'boolean',
    'product_code': 'varchar(50)',
    'weight_class': 'varchar(50)'
}

orders_table 

dtypes = {
    'index': 'bigint',
    'order_key': 'bigint',
    'date_uuid': 'uuid',
    'user_uuid': 'uuid',
    'card_key': 'bigint',
    'date_key': 'bigint',
    'product_key': 'bigint',
    'store_key': 'bigint',
    'user_key': 'bigint',
    'currency_key': 'bigint',
    'card_number': 'varchar(30)',
    'store_code': 'varchar(30)',
    'product_code': 'varchar(30)',
    'product_quantity': 'smallint',
    'country_code': 'varchar(10)'
}


dim_store_details 

dtypes = {
    'index': 'bigint',
    'store_key': 'bigint',
    'store_address': 'varchar(1000)',
    'longitude': 'float',
    'latitude': 'float',
    'city': 'varchar(255)',
    'store_code': 'varchar(20)',
    'number_of_staff': 'smallint',
    'opening_date': 'date',
    'store_type': 'varchar(255)',
    'country_code': 'varchar(10)',
    'region': 'varchar(255)'
}



